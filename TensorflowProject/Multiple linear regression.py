# -*- coding: utf-8 -*-
"""다중선형회귀.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18wNuoIMPQ4AbyIBW96MQXZn7T9YZS6JJ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import tensorflow.compat.v1 as tf
# %matplotlib inline
tf.disable_v2_behavior()

xy = [[0.1, 12], [0.1, 9], [0.16, 12],
          [0.2, 12], [0.16, 9], [0.1, 5],
          [0.2, 9], [0.3, 12], [0.16, 5], 
          [0.4, 12], [0.3, 9], [0.2, 5],
          [0.4, 9], [0.6, 12], [0.3, 5], 
          [0.8, 12], [0.6, 9], [0.4, 5],
          [1, 12], [0.8, 9], [1, 9], 
          [0.6, 5], [0.8, 5], [1 ,5]]

y = [[0.5],[0.66],[0.79],
         [0.99],[1.06],[1.19],
         [1.32],[1.49],[1.91], 
         [1.98],[2.29],[2.38],
         [2.64],[2.97],[3.57],
         [3.96],[3.96],[4.76],
         [4.96],[5.29],[6.61],
         [7.13],[9.51],[11.89]]

X = tf.placeholder(tf.float32, shape = [None, 2]) 
Y = tf.placeholder(tf.float32, shape = [None, 1])
W = tf.Variable(tf.random_normal([2, 1]), name = "weight")
b = tf.Variable(tf.random_normal([1]), name = "bias")
hypothesis = tf.matmul(X, W) + b #행렬의 곱셈연산 수행 

cost = tf.reduce_mean(tf.square(hypothesis - Y))

learning_rate = 0.005
update = tf.train.GradientDescentOptimizer(learning_rate)
train = update.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(10001):
    cost_, hypo_, _ = sess.run([cost, hypothesis, train], feed_dict={X:xy, Y:y})
    if step%1000==0:
        print(step,"cost:",cost_)

predict = [[20000/50000, 12]]
p = sess.run(hypothesis, feed_dict={X: predict})
print(p)

new_xy1 = [0.1, 0.1, 0.16,
          0.2, 0.16, 0.1,
          0.2, 0.3, 0.16, 
          0.4, 0.3, 0.2,
          0.4, 0.6, 0.3, 
          0.8, 0.6, 0.4,
          1, 0.8, 1 , 
          0.6, 0.8, 1]
new_xy2 = [12,9, 12,
          12, 9,  5,
          9, 12, 5, 
          12, 9, 5,
          9, 12, 5, 
          12,  9, 5,
          12,  9, 9, 
           5, 5, 5]
y_data = [[1.19], [1.91], [2.38], [3.57], [4.76], [7.13], [9.51], [11.89],
          [0.66], [1.06], [1.32], [2.29], [2.64], [3.96], [5.29], [6.61],
          [0.5], [0.79], [0.99], [1.49], [1.98], [2.97], [3.96], [4.96]]
cost_, hypo_, _ = sess.run([cost, hypothesis, train], feed_dict={X:xy, Y:y})
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(new_xy1,new_xy2, y)
ax.scatter(new_xy1,new_xy2, hypo_)
plt.show()