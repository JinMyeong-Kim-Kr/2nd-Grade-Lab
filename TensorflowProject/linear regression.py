# -*- coding: utf-8 -*-
"""선형회귀분석.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lqvCuB3cIjkP-YzdrRqCW-fbMh587gCG
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

x_data = [5000, 8000, 10000, 15000 ,20000, 30000, 40000, 50000]  # 보조배터리 용량 데이터
y_data = [1.19, 1.91, 2.38, 3.57, 4.76, 7.13, 9.51, 11.89]  #용량에 따른 완전 충전 가능 횟수를 소수 셋째 자리에서 반올림


plt.plot(x_data, y_data, 'ro')
plt.xlabel('Battery Capacity ')
plt.ylabel('Number of rechargeable')
plt.xticks([10000, 20000, 30000, 40000, 50000])
plt.yticks([2.5, 5, 7, 10, 12])
plt.show()

new_x_data = []
new_y_data = []
for i in x_data:
  new_x_data.append(i/50000)
for j in y_data:
  new_y_data.append(j/12)

print(new_x_data)
print(new_y_data)

W = tf.Variable(1.0)
b = tf.Variable(1.0)
hypothesis = W * new_x_data + b
cost = tf.sqrt(tf.reduce_mean(tf.square(hypothesis - new_y_data)))
learning_rate = 0.001
update = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)

# Commented out IPython magic to ensure Python compatibility.
sess = tf.Session()
sess.run(tf.global_variables_initializer())


for step in np.arange(5001):
  sess.run(update)
  c, w_, b_ = sess.run([cost, W, b])
  if step % 1000 == 0:
    print("step %d   :   cost = %f    w = %f     b=%f"
#               % (step, c, w_, b_))

h = sess.run(hypothesis)
plt.scatter(new_x_data, new_y_data, color ='red')
plt.plot(new_x_data, h, 'b')
plt.xlabel('Battery Capacity/50000')
plt.ylabel('Number of rechargeable / 12')
plt.show()

input_ = int(input("input battery capacity : "))
predict = W * [input_/50000] + b
p = sess.run(predict)
print(p*12)
